// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: piggy.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_piggy_2eproto__INCLUDED
#define GRPC_piggy_2eproto__INCLUDED

#include "piggy.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace piggy {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "piggy.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::piggy::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status TryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::piggy::RegisterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::RegisterReply>> AsyncTryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::RegisterReply>>(AsyncTryRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::RegisterReply>> PrepareAsyncTryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::RegisterReply>>(PrepareAsyncTryRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status TryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::piggy::LoginReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::LoginReply>> AsyncTryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::LoginReply>>(AsyncTryLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::LoginReply>> PrepareAsyncTryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::LoginReply>>(PrepareAsyncTryLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::piggy::CheckKickOutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::CheckKickOutReply>> AsyncCheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::CheckKickOutReply>>(AsyncCheckKickOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::CheckKickOutReply>> PrepareAsyncCheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::piggy::CheckKickOutReply>>(PrepareAsyncCheckKickOutRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TryRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::RegisterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TryLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckKickOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::CheckKickOutReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::RegisterReply>* AsyncTryRegisterRaw(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::RegisterReply>* PrepareAsyncTryRegisterRaw(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::LoginReply>* AsyncTryLoginRaw(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::LoginReply>* PrepareAsyncTryLoginRaw(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::CheckKickOutReply>* AsyncCheckKickOutRaw(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::piggy::CheckKickOutReply>* PrepareAsyncCheckKickOutRaw(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::piggy::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status TryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::piggy::RegisterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::RegisterReply>> AsyncTryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::RegisterReply>>(AsyncTryRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::RegisterReply>> PrepareAsyncTryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::RegisterReply>>(PrepareAsyncTryRegisterRaw(context, request, cq));
    }
    ::grpc::Status TryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::piggy::LoginReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::LoginReply>> AsyncTryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::LoginReply>>(AsyncTryLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::LoginReply>> PrepareAsyncTryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::LoginReply>>(PrepareAsyncTryLoginRaw(context, request, cq));
    }
    ::grpc::Status CheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::piggy::CheckKickOutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::CheckKickOutReply>> AsyncCheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::CheckKickOutReply>>(AsyncCheckKickOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::CheckKickOutReply>> PrepareAsyncCheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::piggy::CheckKickOutReply>>(PrepareAsyncCheckKickOutRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void TryRegister(::grpc::ClientContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response, std::function<void(::grpc::Status)>) override;
      void TryRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::RegisterReply* response, std::function<void(::grpc::Status)>) override;
      void TryLogin(::grpc::ClientContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response, std::function<void(::grpc::Status)>) override;
      void TryLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::LoginReply* response, std::function<void(::grpc::Status)>) override;
      void CheckKickOut(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response, std::function<void(::grpc::Status)>) override;
      void CheckKickOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::piggy::CheckKickOutReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::piggy::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::piggy::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::RegisterReply>* AsyncTryRegisterRaw(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::RegisterReply>* PrepareAsyncTryRegisterRaw(::grpc::ClientContext* context, const ::piggy::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::LoginReply>* AsyncTryLoginRaw(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::LoginReply>* PrepareAsyncTryLoginRaw(::grpc::ClientContext* context, const ::piggy::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::CheckKickOutReply>* AsyncCheckKickOutRaw(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::piggy::CheckKickOutReply>* PrepareAsyncCheckKickOutRaw(::grpc::ClientContext* context, const ::piggy::CheckKickOutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_TryRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_TryLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckKickOut_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response);
    virtual ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response);
    virtual ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response);
    virtual ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::piggy::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::piggy::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TryRegister() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTryRegister(::grpc::ServerContext* context, ::piggy::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::piggy::RegisterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TryLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TryLogin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TryLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTryLogin(::grpc::ServerContext* context, ::piggy::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::piggy::LoginReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckKickOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckKickOut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CheckKickOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckKickOut(::grpc::ServerContext* context, ::piggy::CheckKickOutRequest* request, ::grpc::ServerAsyncResponseWriter< ::piggy::CheckKickOutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_TryRegister<WithAsyncMethod_TryLogin<WithAsyncMethod_CheckKickOut<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::piggy::HelloRequest, ::piggy::HelloReply>(
          [this](::grpc::ServerContext* context,
                 const ::piggy::HelloRequest* request,
                 ::piggy::HelloReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_TryRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::piggy::RegisterRequest, ::piggy::RegisterReply>(
          [this](::grpc::ServerContext* context,
                 const ::piggy::RegisterRequest* request,
                 ::piggy::RegisterReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->TryRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_TryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TryLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_TryLogin() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::piggy::LoginRequest, ::piggy::LoginReply>(
          [this](::grpc::ServerContext* context,
                 const ::piggy::LoginRequest* request,
                 ::piggy::LoginReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->TryLogin(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_TryLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckKickOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckKickOut() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::piggy::CheckKickOutRequest, ::piggy::CheckKickOutReply>(
          [this](::grpc::ServerContext* context,
                 const ::piggy::CheckKickOutRequest* request,
                 ::piggy::CheckKickOutReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckKickOut(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CheckKickOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_TryRegister<ExperimentalWithCallbackMethod_TryLogin<ExperimentalWithCallbackMethod_CheckKickOut<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TryRegister() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TryLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TryLogin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TryLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckKickOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckKickOut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CheckKickOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TryRegister() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTryRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TryLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TryLogin() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TryLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTryLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckKickOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckKickOut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CheckKickOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckKickOut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_TryRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->TryRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_TryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TryRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TryLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_TryLogin() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->TryLogin(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_TryLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TryLogin(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckKickOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckKickOut() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckKickOut(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckKickOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckKickOut(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::piggy::HelloRequest, ::piggy::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::piggy::HelloRequest* request, ::piggy::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::piggy::HelloRequest,::piggy::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TryRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TryRegister() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::piggy::RegisterRequest, ::piggy::RegisterReply>(std::bind(&WithStreamedUnaryMethod_TryRegister<BaseClass>::StreamedTryRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TryRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TryRegister(::grpc::ServerContext* context, const ::piggy::RegisterRequest* request, ::piggy::RegisterReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTryRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::piggy::RegisterRequest,::piggy::RegisterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TryLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TryLogin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::piggy::LoginRequest, ::piggy::LoginReply>(std::bind(&WithStreamedUnaryMethod_TryLogin<BaseClass>::StreamedTryLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TryLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TryLogin(::grpc::ServerContext* context, const ::piggy::LoginRequest* request, ::piggy::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTryLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::piggy::LoginRequest,::piggy::LoginReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckKickOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckKickOut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::piggy::CheckKickOutRequest, ::piggy::CheckKickOutReply>(std::bind(&WithStreamedUnaryMethod_CheckKickOut<BaseClass>::StreamedCheckKickOut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckKickOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckKickOut(::grpc::ServerContext* context, const ::piggy::CheckKickOutRequest* request, ::piggy::CheckKickOutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckKickOut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::piggy::CheckKickOutRequest,::piggy::CheckKickOutReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_TryRegister<WithStreamedUnaryMethod_TryLogin<WithStreamedUnaryMethod_CheckKickOut<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_TryRegister<WithStreamedUnaryMethod_TryLogin<WithStreamedUnaryMethod_CheckKickOut<Service > > > > StreamedService;
};

}  // namespace piggy


#endif  // GRPC_piggy_2eproto__INCLUDED
